@startuml 3dTetris

class Game {
    +void start()
    +void pause()
    +void restart()
    +void stop()
    +void help()
    -State _state
    -Controller _controller
    -Logger _logger
}

class Logger {
    +void log()
}

class Grid {
    +void draw()
    -std::tuple<double,double,double> _position
    -std::tuple<double,double,double> _color
    -size_t _size
}

class Volume {
    +void draw()
    -std::vector<Cube> _cubes
    -std::tuple<double,double,double> _position
    -std::tuple<double,double,double> _color
}

class Cube {
    +void draw()
    -std::tuple<double,double,double> _position
    -std::tuple<double,double,double> _color
}

class Controller {
    -VolumeRandomGenerator _generator
    -LigthSourceFactory _lsFactory
    -std::vector<Volume> _volumes
    -Grid _grid
    -std::vector<ILigthSource> _ligthSources
    -std::vector<ICamera> _cameras
}

interface ILigthSource

class LigthSource {
    -std::tuple<double,double,double> _position
}

class LigthSourceFactory {
    +ILigthSource createLightSource()
}

class VolumeRandomGenerator {
    +Volume generate()
    -RandomEngine _engine
}

interface ICamera {
    +void zoomIn()
    +void zoomOut()
}

class Camera {
    -std::tuple<double,double,double> _position
    -std::vector<Input> _inputCollection
}

class CameraFactory {
    +ICamera createCamera()
}

class Keyboard
class Mouse

interface Input

interface Drawable {
    +void draw()
}

Game o-- "1" Controller
Game o-- "1" Logger
Controller o-- "1" LigthSourceFactory
Controller o-- "1" CameraFactory
Controller o-- "1" VolumeRandomGenerator
Controller o-- "1" Grid
Controller o-- "*" Volume
Controller o-- "*" LigthSource
Controller o-- "*" Camera
Volume --> "*" Cube
Camera --> "*" Input

Grid --|> Drawable
Volume --|> Drawable
Cube --|> Drawable
Keyboard --|> Input
Mouse --|> Input
LigthSource --|> ILigthSource
Camera --|> ICamera

@enduml